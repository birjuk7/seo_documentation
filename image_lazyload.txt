With images being among the most popular type of content on the web, page load time on websites can easily become an issue.

Even when properly optimized, images can weigh quite a bit. This can have a negative impact on the time visitors have to wait 
before they can access content on your website. Chances are, they get impatient and navigate somewhere else, unless you come 
up with a solution to image loading that doesn’t interfere with the perception of speed.

5 approaches to lazy loading images for web optimization to improve the user experience on your website.

Lazy Loading
Lazy loading images means loading images on websites asynchronously — that is, after the above-the-fold content is fully loaded, 
or even conditionally, only when they appear in the browser’s viewport. This means that if users don’t scroll all the way down, 
images placed at the bottom of the page won’t even be loaded.

A number of websites use this approach, but it’s especially noticeable on image-heavy sites. Try browsing your favorite online 
hunting ground for high-res photos, and you’ll soon realize how the website loads just a limited number of images. As you scroll 
down the page, you’ll see placeholder images quickly filling up with real images.

Why Lazy Loading Images?
There are at least a couple of excellent reasons why you should consider lazy loading images for your website:

If your website uses JavaScript to display content or provide some kind of functionality to users, loading the DOM quickly 
becomes critical. It’s common for scripts to wait until the DOM has completely loaded before they start running. On a site 
with a significant number of images, lazy loading — or loading images asynchronously — could make the difference between 
users staying or leaving your website.
Since most lazy loading solutions work by loading images only if the user has scrolled to the location where images would 
be visible inside the viewport, those images will never be loaded if users never get to that point. This means considerable 
savings in bandwidth, performance & cost for users, especially those accessing the web on mobile devices and slow-connections, will 
be thanking you.
Well, lazy loading images helps with website performance, but what’s the best way to go about it?

5 interesting techniques are as follows.

1 Lazy Loading Using the Intersection Observer API
The Intersection Observer API is a modern interface that you can leverage for lazy loading images and other content.
The Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element 
with an ancestor element or with a top-level document’s viewport.
In other words, what is being asynchronously watched is the intersection of one element with another.

Let’s say you’d like to lazy load an image gallery. The markup for each image would look like this:
<img data-src="image.jpg" alt="test image">
In other words, what is being asynchronously watched is the intersection of one element with another.

Why lazy load images or video instead of just loading them?

1 It wastes data. 
  On unmetered connections,using that precious bandwidth, effectively can be a waste of money.

2 It wastes processing time, battery, and other system resources. 
  After a media resource is downloaded, the browser must decode it and render its content in the viewport.

Using INTERSECTION OBSERVER
If you've written lazy loading code before, you may have accomplished your task by using event handlers such as scroll or resize. 
While this approach is the most compatible across browsers, modern browsers offer a more performant and efficient way to do the 
work of checking element visibility via the intersection observer API.

INTERSECTION OBSERVER is easier to use and read than code relying on various event handlers, because developers only need to 
register an observer to watch elements rather than writing tedious element visibility detection code. All that's left to do for 
the developer is to decide what to do when an element is visible. Let's assume this basic markup pattern for our lazily loaded <img> elements:

<img class="lazy" src="placeholder-image.jpg" data-src="image-to-lazy-load-1x.jpg" data-srcset="image-to-lazy-load-2x.jpg 2x, image-to-lazy-load-1x.jpg 1x" alt="I'm an image!">
There are three relevant pieces of this markup we should focus on:

The class attribute, which is what we'll select the element with in JavaScript.
The src attribute, which references a placeholder image that will appear when the page first loads.
The data-src and data-srcset attributes, which are placeholder attributes containing the URL for the image we'll load once the element is in the viewport.
Now let's see how we can use intersection observer in JavaScript to lazy load images using this markup pattern:

document.addEventListener("DOMContentLoaded", function() {
  var lazyImages = [].slice.call(document.querySelectorAll("img.lazy"));
  if ("IntersectionObserver" in window) {
    let lazyImageObserver = new IntersectionObserver(function(entries, observer) {
      entries.forEach(function(entry) {
        if (entry.isIntersecting) {
          let lazyImage = entry.target;
          lazyImage.src = lazyImage.dataset.src;
          lazyImage.srcset = lazyImage.dataset.srcset;
          lazyImage.classList.remove("lazy");
          lazyImageObserver.unobserve(lazyImage);
        }
      });
    });
    lazyImages.forEach(function(lazyImage) {
      lazyImageObserver.observe(lazyImage);
    });
  } else {
    // Possibly fall back to a more compatible method here
  }
});

Using event handlers (the most compatible way)
While you should use intersection observer for lazy loading, your application requirements may be such that browser 
compatibility is critical. You can polyfill intersection observer support (and this would be easiest), but you could 
also fall back to code using scroll, resize, and possibly orientationchange event handlers in concert with 
getBoundingClientRect to determine whether an element is in the viewport.

										***





































