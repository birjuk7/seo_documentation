Lazy loading video

As with image elements, we can also lazy load video. When we load video in normal circumstances, we do so using the <video> 
element (although an alternate method using <img> has emerged with limited implementation). How we lazy load <video> depends 
on the use case, though. Let's discuss a couple of scenarios that each require a different solution.

For video that doesn't autoplay
For videos where playback is initiated by the user (i.e., videos that don't autoplay), specifying the preload attribute on 
the <video> element may be desirable:

<video controls preload="none" poster="one-does-not-simply-placeholder.jpg">
  <source src="one-does-not-simply.webm" type="video/webm">
  <source src="one-does-not-simply.mp4" type="video/mp4">
</video>
Here, we use a preload attribute with a value of none to prevent browsers from preloading any video data. To occupy the space, 
we use the poster attribute to give the <video> element a placeholder. The reason for this is that default behaviors for loading 
video can vary from browser to browser:

As with Chrome on desktop, 11.0 desktop versions of Safari will preload a range of the video. In version 11.2 (currently Safari's 
Tech Preview version), only the video metadata is preloaded. In Safari on iOS, videos are never preloaded.
When Data Saver mode is enabled, preload defaults to none.
Because browser default behaviors with regard to preload are not set in stone, being explicit is probably your best bet. In this 
cases where the user initiates playback, using preload="none" is the easiest way to defer loading of video on all platforms. The 
preload attribute isn't the only way to defer the loading of video content. Fast Playback with Video Preload may give you some 
ideas and insight into working with video playback in JavaScript.

Unfortunately, it doesn't prove useful when we want to use video in place of animated GIFs, which we'll cover next.

For video acting as an animated GIF replacement
While animated GIFs enjoy wide use, they're subpar to video equivalents in a number of ways, particularly in output file size. 
Animated GIFs can stretch into the range of several megabytes of data. Videos of similar visual quality tend to be far smaller.

Using the <video> element as a replacement for animated GIF is not as straightforward as the <img> element. Inherent in animated 
GIFs are these three behaviors:

They play automatically when loaded.
They loop continuously (though that's not always the case).
They don't have an audio track.
Achieving this with the <video> element looks something like this:

<video autoplay muted loop playsinline>
  <source src="one-does-not-simply.webm" type="video/webm">
  <source src="one-does-not-simply.mp4" type="video/mp4">
</video>
The autoplay, muted, and loop attributes are self-explanatory. playsinline is necessary for autoplaying to occur in iOS. Now we 
have a serviceable video-as-GIF replacement that works across platforms. But how to go about lazy loading it? Chrome will lazy 
load video for you, but you can't count on all browsers to provide this optimized behavior. Depending on your audience and 
application requirements, you may need to take matters into your own hands. To start, modify your <video> markup accordingly:

<video autoplay muted loop playsinline width="610" height="254" poster="one-does-not-simply.jpg">
  <source data-src="one-does-not-simply.webm" type="video/webm">
  <source data-src="one-does-not-simply.mp4" type="video/mp4">
</video>
You'll notice the addition of the poster attribute, which lets you specify a placeholder to occupy the <video> element's space 
until the video is lazy loaded. As with our <img> lazy loading examples from before, we stash the video URL in the data-src 
attribute on each <source> element. 

Lazy loading libraries
If you're not so concerned about how lazy loading works under the hood and just want to pick a library and go (and there's no shame 
in that!), there's plenty of options to choose from. Many libraries use a markup pattern similar to the ones demonstrated in this guide. 
Here are some lazy loading libraries you may find useful:

lazysizes is a full-featured lazy loading library that lazy loads images and iframes. The pattern it uses is quite similar to the code 
examples shown here in that it automatically binds to a lazyload class on <img> elements, and requires you to specify image URLs in 
data-src and/or data-srcset attributes, the contents of which are swapped into src and/or srcset attributes, respectively. It uses 
intersection observer (which you can polyfill), and can be extended with a number of plugins to do things like lazy load video.
lozad.js is a super lightweight option that uses intersection observer only. As such, it's highly performant, but will need to be polyfilled 
before you can use it on older browsers.

blazy is another such option that bills itself as a lightweight lazy loader (weighing in at 1.4 KB). As with lazysizes, it doesn't need any 
third party utilities to load, and works for IE7+. Unfortunately, it doesn't use intersection observer.


Additionally, you may not want to be so strict about the fold line as the threshold for triggering lazy loading. It may be more ideal for your 
purposes to establish a buffer zone some distance below the fold so that images begin loading well before the user scrolls them into the viewport. 
For example, The intersection observer API allows you to specify a rootMargin property in an options object when you create a new IntersectionObserver 
instance. This effectively gives elements a buffer, which triggers lazy loading behavior before the element is in the viewport:

let lazyImageObserver = new IntersectionObserver(function(entries, observer) {
  // Lazy loading image code goes here
}, {
  rootMargin: "0px 0px 256px 0px"
});

If the value for rootMargin looks similar to values you'd specify for a CSS margin property, that's because it is! In this case, we're broadening 
the bottom margin of the observing element (the browser viewport by default, but this can be changed to a specific element using the root property) 
by 256 pixels. That means the callback function will execute when an image element is within 256 pixels of the viewport, meaning that the image will 
begin to load before the user actually sees it.

To achieve this same effect using scroll event handling code, simply adjust your getBoundingClientRect check to include a buffer, and you'll get the 
same effect in browsers that don't support intersection observer.

Layout shifting and placeholders
Lazy loading media can cause shifting in the layout if placeholders aren't used. These changes can be disorienting for users and trigger expensive 
DOM layout operations that consume system resources and contribute to jank. At a minimum, consider using a solid color placeholder occupying the 
same dimensions as the target image, or techniques such as LQIP or SQIP that hint at the content of a media item before it loads.

For <img> tags, src should initially point to a placeholder until that attribute is updated with the final image URL. Use the poster attribute in a 
<video> element to point to a placeholder image. Additionally, use width and height attributes on both <img> and <video> tags. This ensures that 
transitioning from placeholders to final images won't change the rendered size of the element as media loads.

Image decoding delays
Loading large images in JavaScript and dropping them into the DOM can tie up the main thread, causing the user interface to be unresponsive for a 
short period of time while decoding occurs. Asynchronously decoding images using the decode method prior to inserting them into the DOM can cut 
down on this sort of jank, but beware: It's not available everywhere yet, and it adds complexity to lazy loading logic. If you want to use it, 
you'll need to check for it. Below shows how you might use Image.decode() with a fallback:

var newImage = new Image();
newImage.src = "my-awesome-image.jpg";

if ("decode" in newImage) {
  // Fancy decoding logic
  newImage.decode().then(function() {
    imageContainer.appendChild(newImage);
  });
} else {
  // Regular image load
  imageContainer.appendChild(newImage);
}
Check out this CodePen link to see code similar to this example in action. If most of your images are fairly small, this may not do much for you, 
but it can certainly help cut down on jank when lazy loading large images and inserting them into the DOM.

When stuff doesn't load
Sometimes media resources will fail to load for one reason or another and errors occur. When might this happen? It depends, but here's one hypothetical 
scenario for you: You have an HTML caching policy for a short period of time (e.g., five minutes), and the user visits the site or a user has a left a 
stale tab open for a long period of time (e.g., several hours) and comes back to read your content. At some point in this process, a redeployment occurs. 
During this deployment, an image resource's name changes due to hash-based versioning, or is removed altogether. By the time the user lazy loads the image, 
the resource is unavailable, and thus fails.

While these are relatively rare occurrences, it may behoove you to have a backup plan if lazy loading fails. For images, such a solution may look something 
like this:

var newImage = new Image();
newImage.src = "my-awesome-image.jpg";

newImage.onerror = function(){
  // Decide what to do on error
};
newImage.onload = function(){
  // Load the image
};
What you decide to do in the event of an error depends on your application. For example, you could replace the image placeholder area with a button that 
allows the user to attempt to load the image again, or simply display an error message in the image placeholder area.

Other scenarios could arise as well. Whatever you do, it's never a bad idea to signal to the user when an error has occurred, and possibly give them an 
action to take if something goes awry.

JavaScript availability
It shouldn't be assumed that JavaScript is always available. If you're going to lazy load images, consider offering <noscript> markup that will show images 
in case JavaScript is unavailable. The simplest possible fallback example involves using <noscript> elements to serve images if JavaScript is turned off:

<!-- An image that eventually gets lazy loaded by JavaScript -->
<img class="lazy" src="placeholder-image.jpg" data-src="image-to-lazy-load.jpg" alt="I'm an image!">
<!-- An image that is shown if JavaScript is turned off -->
<noscript>
  <img src="image-to-lazy-load.jpg" alt="I'm an image!">
</noscript>
If JavaScript is turned off, users will see both the placeholder image and the image contained with the <noscript> elements. To get around this, we can 
place a class of no-js on the <html> tag like so:

<html class="no-js">
Then we place one line of inline script in the <head> before any style sheets are requested via <link> tags that removes the no-js class from the <html> 
element if JavaScript is on:

<script>document.documentElement.classList.remove("no-js");</script>
Finally, we can use some CSS to simply hide elements with a class of lazy when JavaScript is unavailable like so:

.no-js .lazy {
  display: none;
}
This doesn't prevent placeholder images from loading, but the outcome is more desirable. People with JavaScript turned off get something more than placeholder 
images, which is better than placeholders and no meaningful image content at all.

Conclusion
Used with care, lazy loading images and video can seriously lower the initial load time and page payloads on your site. Users won't incur unnecessary network 
activity and processing costs of media resources they may never see, but they can still view those resources if they want.

As far as performance improvement techniques go, lazy loading is reasonably uncontroversial. If you have a lot of inline imagery in your site, it's a perfectly 
fine way to cut down on unnecessary downloads. Your site's users and project stakeholders will appreciate it!


